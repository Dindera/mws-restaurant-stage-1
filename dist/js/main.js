let restaurants,neighborhoods,cuisines;var newMap,markers=[];document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZGluZGVyYSIsImEiOiJjamtsazl5NWIxd2E3M3Btemp4Njh6eGtrIn0.azq835pUPzRoLuJUX-7b1A",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),a=e.selectedIndex,n=t.selectedIndex,s=e[a].value,r=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,r,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),a=document.createElement("img");a.className="restaurant-img",a.src=DBHelper.imageUrlForRestaurant(e),a.srcset=DBHelper.imageSrcsetForIndex(e),a.sizes="300px",a.alt=`photograph of ${e.name} restaurant`;const n=document.createElement("div");n.classList.add("head_name"),t.append(n),n.append(a);const s=document.createElement("div");s.className="restaurant-info",t.tabIndex="0",t.append(s);const r=document.createElement("h1");r.innerHTML=e.name,s.append(r);const o=document.createElement("div");o.classList.add("fav_list"),n.append(o);const c=document.createElement("input");c.className="is_favorite",c.setAttribute("role","checkbox"),c.type="checkbox",c.name="favorite";const i=document.createElement("label");i.className="checkbox-label","true"==e.is_favorite?(console.log(e.is_favorite),c.checked=!0,c.setAttribute("aria-checked","true"),c.innerHTML=`Remove ${e.name} as a favorite`,c.title=`Remove ${e.name} as a favorite`):(console.log(e.is_favorite),c.checked=!1,c.setAttribute("aria-checked","false"),c.innerHTML=`Add ${e.name} as a favorite`,c.title=`Add ${e.name} as a favorite`),console.log("Checked : ",c.checked),c.addEventListener("click",()=>(console.log("Checked Click : ",c.checked),c.checked?(c.setAttribute("aria-checked","true"),c.innerHTML=`Remove ${e.name} as a favorite`,c.title=`Remove ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"true")):(c.setAttribute("aria-checked","false"),c.innerHTML=`Add ${e.name} as a favorite`,c.title=`Add ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"false")))),o.append(c),o.append(i),n.append(o);const l=document.createElement("p");l.innerHTML=e.neighborhood,s.append(l);const d=document.createElement("p");d.innerHTML=e.address,s.append(d);const m=document.createElement("a");return m.innerHTML="View Details",m.href=DBHelper.urlForRestaurant(e),s.append(m),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
