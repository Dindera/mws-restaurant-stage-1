const dbPromise=idb.open("restaurant-db",4,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurant-store",{keyPath:"id"}).createIndex("restaurantIndex","is_favorite");case 1:e.createObjectStore("review-store",{keyPath:"id"}).createIndex("reviewIndex","restaurant_id"),e.createObjectStore("favorite-store",{keyPath:"is_favorite"});case 2:e.createObjectStore("offline-store",{keyPath:"name",autoIncrement:!0}).createIndex("offlineIndex","restaurant_id")}});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static fetchRestaurants(e){function t(){dbPromise.then(e=>e.transaction("restaurant-store").objectStore("restaurant-store").getAll()).then(t=>e(null,t))}fetch(`${DBHelper.DATABASE_URL}/restaurants/`).then(function(e){return e.json()}).then(e=>(dbPromise.then(t=>{const r=t.transaction("restaurant-store","readwrite"),n=r.objectStore("restaurant-store");for(const t of e)n.put(t);return r.complete}),e)).then(function(t){return e(null,t)}).catch(()=>t())}static fetchReviews(e,t){fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${+e}`).then(function(e){return e.json()}).then(e=>(dbPromise.then(t=>{const r=t.transaction("review-store","readwrite"),n=r.objectStore("review-store");for(const t of e)n.put(t);return r.complete}),e)).then(function(e){return dbPromise.then(e=>{e.transaction("review-store","readwrite").objectStore("review-store").index("reviewIndex").openCursor().then(e=>e.advance(15)).then(function e(t){t&&(t.delete(),t.continue().then(e))})}),t(null,e)}).catch(()=>dbPromise.then(r=>r.transaction("review-store").objectStore("review-store").index("reviewIndex").getAll(IDBKeyRange.only(+e)).then(e=>{console.log(null,e),t(null,e)}))&&dbPromise.then(e=>e.transaction("offline-store").objectStore("offline-store").index("offlineIndex").getAll().then(e=>{console.log(null,e),t(null,e)})))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchReviewById(e,t){DBHelper.fetchReviews((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Review does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/src/img/${e.id}-300_small.jpg`}static imageSrcsetForIndex(e){return`src/images/${e.id}-300_small.jpg 1x, src/images/${e.id}-600_medium_2x.jpg 2x`}static imageSrcsetForRestaurant(e){return`src/images/${e.id}-300_small.jpg 300w, src/images/${e.id}-600_medium_2x.jpg 600w, src/images/${e.id}-800_large_2x.jpg 800w`}static saveFavorite(e,t){const r=`${DBHelper.DATABASE_URL}/restaurants/${e}/?is_favorite=${t}`;DBHelper.fetchRestaurantById(e,(e,n)=>{e||(n.is_favorite=t,console.log(t),dbPromise.then(e=>{const s=e.transaction("restaurant-store","readwrite"),a=s.objectStore("restaurant-store");return console.log(r),a.put(n).then(e=>{console.log(s),console.log(t),console.log(r),console.log(n.is_favorite),fetch(r,{method:"PUT"})}),s.complete&&n}).catch(e=>(DBHelper.fetchRestaurants(e=>dbPromise.then(t=>{const r=t.transaction("restaurant-store","readwrite").objectStore("restaurant-store").index("restaurantIndex","readwrite").getAll("is_favorite");return console.log(null,r),e(null,r)})),console.log(n.is_favorite),n.is_favorite)))})}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
