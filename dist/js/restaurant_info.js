let restaurant;var newMap;document.addEventListener("DOMContentLoaded",e=>{initMap()}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZGluZGVyYSIsImEiOiJjamtsazl5NWIxd2E3M3Btemp4Njh6eGtrIn0.azq835pUPzRoLuJUX-7b1A",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fetchReviewsFromURL=(e=>{if(self.review)return void e(null,self.review);const t=getParameterByName("id");t?DBHelper.fetchReviewById(t,(t,n)=>{self.review=n,n?(fillReviewsHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name;const t=document.getElementById("is_favorite");"true"==e.is_favorite?(console.log(e.is_favorite),t.checked=!0,t.setAttribute("aria-checked","true"),t.innerHTML=`Remove ${e.name} as a favorite`,t.title=`Remove ${e.name} as a favorite`):(console.log(e.is_favorite),t.checked=!1,t.setAttribute("aria-checked","false"),t.innerHTML=`Add ${e.name} as a favorite`,t.title=`Add ${e.name} as a favorite`),console.log("Checked : ",t.checked),t.addEventListener("click",()=>(console.log("Checked Click : ",t.checked),t.checked?(t.setAttribute("aria-checked","true"),t.innerHTML=`Remove ${e.name} as a favorite`,t.title=`Remove ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"true")):(t.setAttribute("aria-checked","false"),t.innerHTML=`Add ${e.name} as a favorite`,t.title=`Add ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"false")))),document.getElementById("restaurant-address").innerHTML=e.address;const n=document.getElementById("restaurant-img");n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e),n.srcset=DBHelper.imageSrcsetForRestaurant(e),n.sizes="(max-width: 350px) 300px, (max-width: 650px) 600px, (min-width: 651px) 800px",n.alt=" ",document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviews(e.id,fillReviewsHTML)}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const a=document.createElement("tr"),r=document.createElement("td");r.innerHTML=n,a.appendChild(r);const o=document.createElement("td");o.innerHTML=e[n],a.appendChild(o),t.appendChild(a)}}),fillReviewsHTML=((e,t)=>{self.restaurant.reviews=t,e&&console.log("No reviews",e);const n=document.querySelector(".reviews-container"),a=document.createElement("h2");if(a.setAttribute("tabindex",0),a.innerHTML="Reviews",n.appendChild(a),!t){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void n.appendChild(e)}const r=document.getElementById("reviews-list");t.forEach(e=>{r.appendChild(createReviewHTML(e))}),n.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("h3");n.innerHTML=e.name,n.className="review-name",t.appendChild(n);const a=document.createElement("p");a.classList.add("rating"),a.innerHTML=`Rating: ${e.rating}`,a.dataset.rating=e.rating,t.appendChild(a);const r=document.createElement("div");r.append(n),r.append(a),r.className="review-info",t.appendChild(r);const o=document.createElement("p");o.classList.add("createdAt");const i=new Date(e.createdAt).toLocaleDateString();o.innerHTML=`Added:- <strong>${i}</strong>`,t.appendChild(o);const s=document.createElement("p"),d=new Date(e.updatedAt).toLocaleDateString();s.innerHTML=`Updated:- <strong>${d}</strong>`,s.classList.add("updatedAt"),t.appendChild(s);const c=document.createElement("div");c.append(o),c.append(s),c.className="review-date",t.appendChild(c);const l=document.createElement("p");return l.classList.add("comments"),l.innerHTML=e.comments,t.appendChild(l),t});const button=document.querySelector("button");button.addEventListener("click",e=>location.reload()),document.addEventListener("DOMContentLoaded",e=>{"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(e=>{if("SyncManager"in window){console.log("YESSSSSSSSSS Sync"),console.log(e),document.querySelector("form").addEventListener("submit",t=>{t.preventDefault();const n=document.querySelector("form");let a=new FormData(n),r={restaurant_id:self.restaurant.id,name:a.get("reviewName"),rating:a.get("reviewRate"),comments:a.get("comments"),createdAt:new Date,updatedAt:new Date};dbPromise.then(e=>{return e.transaction("offline-store","readwrite").objectStore("offline-store").put(r)}).then(()=>e.sync.register("reviewSync")).catch(t=>(console.log(t),n.submit(),e.sync.register("reviewSync")))})}})}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
