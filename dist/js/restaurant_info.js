let restaurant;var newMap;document.addEventListener("DOMContentLoaded",e=>{initMap()}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZGluZGVyYSIsImEiOiJjamtsazl5NWIxd2E3M3Btemp4Njh6eGtrIn0.azq835pUPzRoLuJUX-7b1A",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,a)=>{self.restaurant=a,a?(fillRestaurantHTML(),e(null,a)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fetchReviewsFromURL=(e=>{if(self.review)return void e(null,self.review);const t=getParameterByName("id");t?DBHelper.fetchReviewById(t,(t,a)=>{self.restaurant=a,a?(fillReviewsHTML(),e(null,a)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name;const t=document.getElementById("is_favorite");"true"==e.is_favorite?(console.log(e.is_favorite),t.checked=!0,t.setAttribute("aria-pressed","true"),t.innerHTML=`Remove ${e.name} as a favorite`,t.title=`Remove ${e.name} as a favorite`):(console.log(e.is_favorite),t.checked=!1,t.setAttribute("aria-pressed","false"),t.innerHTML=`Add ${e.name} as a favorite`,t.title=`Add ${e.name} as a favorite`),console.log("Checked : ",t.checked),t.addEventListener("click",()=>(console.log("Checked Click : ",t.checked),t.checked?(t.setAttribute("aria-pressed","true"),t.innerHTML=`Remove ${e.name} as a favorite`,t.title=`Remove ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"true")):(t.setAttribute("aria-pressed","false"),t.innerHTML=`Add ${e.name} as a favorite`,t.title=`Add ${e.name} as a favorite`,DBHelper.saveFavorite(e.id,"false")))),document.getElementById("restaurant-address").innerHTML=e.address;const a=document.getElementById("restaurant-img");a.className="restaurant-img",a.src=DBHelper.imageUrlForRestaurant(e),a.srcset=DBHelper.imageSrcsetForRestaurant(e),a.sizes="(max-width: 350px) 300px, (max-width: 650px) 600px, (min-width: 651px) 800px",a.alt=" ",document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviews(e.id,fillReviewsHTML)}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let a in e){const n=document.createElement("tr"),r=document.createElement("td");r.innerHTML=a,n.appendChild(r);const o=document.createElement("td");o.innerHTML=e[a],n.appendChild(o),t.appendChild(n)}}),fillReviewsHTML=((e,t)=>{self.restaurant.reviews=t,e&&console.log("No reviews",e);const a=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",a.appendChild(n),!t){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void a.appendChild(e)}const r=document.getElementById("reviews-list");t.forEach(e=>{r.appendChild(createReviewHTML(e))}),a.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li"),a=document.createElement("h3");a.innerHTML=e.name,a.className="review-name",t.appendChild(a);const n=document.createElement("p");n.classList.add("rating"),n.innerHTML=`Rating: ${e.rating}`,n.dataset.rating=e.rating,t.appendChild(n);const r=document.createElement("div");r.append(a),r.append(n),r.className="review-info",t.appendChild(r);const o=document.createElement("p");o.classList.add("createdAt");const s=new Date(e.createdAt).toLocaleDateString();o.innerHTML=`Added:- <strong>${s}</strong>`,t.appendChild(o);const i=document.createElement("p"),l=new Date(e.updatedAt).toLocaleDateString();i.innerHTML=`Updated:- <strong>${l}</strong>`,i.classList.add("updatedAt"),t.appendChild(i);const d=document.createElement("div");d.append(o),d.append(i),d.className="review-date",t.appendChild(d);const c=document.createElement("p");return c.classList.add("comments"),c.innerHTML=e.comments,t.appendChild(c),t});const form=document.querySelector("form");form.addEventListener("submit",e=>{e.preventDefault();let t=new FormData(form),a={id:t.get("id"),restaurant_id:self.restaurant.id,name:t.get("reviewName"),rating:t.get("reviewRate"),comments:t.get("comments"),createdAt:new Date};fetch("http://localhost:1337/reviews",{method:"post",headers:{"Content-type":"application/json; charset=UTF-8"},body:JSON.stringify(a)}).then(e=>{const t=e.json();return fillReviewsHTML(),location.reload(),console.log("Received Data",t),t}).catch(e=>{dbPromise.then(t=>{const n=t.transaction("review-store","readwrite");return n.objectStore("review-store").put(a),fillReviewsHTML(),location.reload(),console.log("Posting Offline",e),n.complete})})}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),a=document.createElement("li");a.innerHTML=e.name,t.appendChild(a)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const a=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return a?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3RhdXJhbnRfaW5mby5qcyJdLCJuYW1lcyI6WyJyZXN0YXVyYW50IiwibmV3TWFwIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJpbml0TWFwIiwiZXJyb3IiLCJmZXRjaFJlc3RhdXJhbnRGcm9tVVJMIiwiY29uc29sZSIsImNlbnRlciIsImxhdGxuZyIsImxhdCIsImxuZyIsInNlbGYiLCJzY3JvbGxXaGVlbFpvb20iLCJtYXBib3hUb2tlbiIsInRpbGVMYXllciIsImlkIiwiYWRkVG8iLCJmaWxsQnJlYWRjcnVtYiIsIkRCSGVscGVyIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsImNhbGxiYWNrIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwiZmV0Y2hSZXN0YXVyYW50QnlJZCIsImZldGNoUmV2aWV3c0Zyb21VUkwiLCJmaWxsUmVzdGF1cmFudEhUTUwiLCJmZXRjaFJldmlld0J5SWQiLCJyZXZpZXciLCJmaWxsUmV2aWV3c0hUTUwiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsIm5hbWUiLCJpc19mYXZvcml0ZSIsImxvZyIsImZhdm9yaXRlIiwiY2hlY2tlZCIsInNldEF0dHJpYnV0ZSIsInRpdGxlIiwic2F2ZUZhdm9yaXRlIiwiYWRkcmVzcyIsImltYWdlIiwiY2xhc3NOYW1lIiwic3JjIiwiaW1hZ2VVcmxGb3JSZXN0YXVyYW50Iiwic3Jjc2V0IiwiaW1hZ2VTcmNzZXRGb3JSZXN0YXVyYW50IiwiY3Vpc2luZV90eXBlIiwib3BlcmF0aW5nX2hvdXJzIiwiZmV0Y2hSZXZpZXdzIiwiaG91cnMiLCJrZXkiLCJvcGVyYXRpbmdIb3VycyIsInJvdyIsImNyZWF0ZUVsZW1lbnQiLCJkYXkiLCJmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCIsInRpbWUiLCJhcHBlbmRDaGlsZCIsInJldmlld3MiLCJjb250YWluZXIiLCJub1Jldmlld3MiLCJmb3JFYWNoIiwidWwiLCJjcmVhdGVSZXZpZXdIVE1MIiwibGkiLCJyYXRpbmciLCJjbGFzc0xpc3QiLCJhZGQiLCJkaXYiLCJhcHBlbmQiLCJjcmVhdGVkQXQiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiY3JlYXRlZERhdGUiLCJ1cGRhdGVkQXQiLCJ1cGRhdGVkRGF0ZSIsImRhdGUiLCJjb21tZW50cyIsImZvcm0iLCJxdWVyeVNlbGVjdG9yIiwicHJldmVudERlZmF1bHQiLCJmb3JtZGF0YSIsIkZvcm1EYXRhIiwibmV3UmV2aWV3IiwiZ2V0IiwicmVzdGF1cmFudF9pZCIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXMiLCJkYXRhIiwianNvbiIsImJvZHkiLCJsb2NhdGlvbiIsImRiIiwidHgiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwicHV0IiwicmV2aWV3U3RvcmUiLCJlcnIiLCJicmVhZGNydW1iIiwidXJsIiwid2luZG93IiwiaHJlZiIsInJlcGxhY2UiLCJyZXN1bHRzIiwiUmVnRXhwIiwiZXhlYyIsInJlZ2V4Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxXQUNKLElBQUlDLE9BSUpDLFNBQVNDLGlCQUFpQixtQkFBcUJDLElBQS9DRixZQU9BRyxRQUFVLE1BQVZBLHVCQUFnQixDQUFBQyxFQUFBTixLQUNkTyxFQUNFQyxRQUFBRixNQUFXQSxJQUNURSxLQUFBQSxPQUFjRixFQUFBQSxJQUFkLE1BQUEsQ0FERkcsT0FFTyxDQUFBVCxFQUFBVSxPQUFBQyxJQUFBWCxFQUFBVSxPQUFBRSxLQUNMQyxLQUFLWixHQUNIUSxpQkFBU1QsSUFFVGMsRUFBQUEsVUFBQUEsb0ZBQWlCLENBSG5CQyxZQUFBLDRGQUtFQyxRQUFGLEdBQ0VELFlBQWEsME5BS2JFLEdBQUksbUJBQ0hDLE1BQU1qQixRQUNUa0IsaUJBQ0FDLFNBQVNDLHVCQUF1QlIsS0FBS2IsV0FBWWEsS0FBS1osYUF3QjVETSx1QkFBMEJlLENBQUFBLElBQTFCZixHQUFBQSxLQUFBQSxXQUN5QixZQUF2QmUsRUFBU3RCLEtBQUFBLEtBQVlBLFlB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bkIsRUFBQWEsS0FBQWIsY0FJRSxNQUFNd0csRUFBYXRHLFNBQVM0QixlQUFlLGNBQ3JDbUMsRUFBSy9ELFNBQVNvRCxjQUFjLE1BQ2xDVyxFQUFHbEMsVUFBWS9CLEVBQVdnQyxLQUg1QmIsRUFBQUEsWUFBa0JuQixLQUtqQnVCLG1CQUxELEVBQUFTLEVBQUF5RSxLQU1BQSxJQUtJQSxFQUFNQyxPQUFPVixTQUFTVyxNQUN4QjNFLEVBQU9BLEVBQUs0RSxRQUFRLFVBQVcsUUFDL0IsTUFDRUMsRUFEWSxJQUFJQyxjQUFjOUUsc0JBQ2QrRSxLQUFLTixHQUx6QmxGLE9BQUFBLEVBR01zRixFQUFRRCxHQUVWQyxtQkFBVUEsRUFEWixHQUFBRCxRQUFBLE1BQUEsTUFBTUksR0FITiIsImZpbGUiOiJyZXN0YXVyYW50X2luZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcmVzdGF1cmFudDtcclxudmFyIG5ld01hcDtcclxuLyoqXHJcbiAqIEluaXRpYWxpemUgbWFwIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4geyAgXHJcbiAgaW5pdE1hcCgpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGxlYWZsZXQgbWFwXHJcbiAqL1xyXG5pbml0TWFwID0gKCkgPT4ge1xyXG4gIGZldGNoUmVzdGF1cmFudEZyb21VUkwoKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XHJcbiAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yIVxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7ICAgICAgXHJcbiAgICAgIHNlbGYubmV3TWFwID0gTC5tYXAoJ21hcCcsIHtcclxuICAgICAgICBjZW50ZXI6IFtyZXN0YXVyYW50LmxhdGxuZy5sYXQsIHJlc3RhdXJhbnQubGF0bG5nLmxuZ10sXHJcbiAgICAgICAgem9vbTogMTYsXHJcbiAgICAgICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgTC50aWxlTGF5ZXIoJ2h0dHBzOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve2lkfS97en0ve3h9L3t5fS5qcGc3MD9hY2Nlc3NfdG9rZW49e21hcGJveFRva2VufScsIHtcclxuICAgICAgICBtYXBib3hUb2tlbjogJ3BrLmV5SjFJam9pWkdsdVpHVnlZU0lzSW1FaU9pSmphbXRzYXpsNU5XSXhkMkUzTTNCdGVtcDROamg2ZUd0ckluMC5henE4MzVwVVB6Um9MdUpVWC03YjFBJyxcclxuICAgICAgICBtYXhab29tOiAxOCxcclxuICAgICAgICBhdHRyaWJ1dGlvbjogJ01hcCBkYXRhICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCAnICtcclxuICAgICAgICAgICc8YSBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzIuMC9cIj5DQy1CWS1TQTwvYT4sICcgK1xyXG4gICAgICAgICAgJ0ltYWdlcnkgwqkgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vXCI+TWFwYm94PC9hPicsXHJcbiAgICAgICAgaWQ6ICdtYXBib3guc3RyZWV0cycgICAgXHJcbiAgICAgIH0pLmFkZFRvKG5ld01hcCk7XHJcbiAgICAgIGZpbGxCcmVhZGNydW1iKCk7XHJcbiAgICAgIERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQoc2VsZi5yZXN0YXVyYW50LCBzZWxmLm5ld01hcCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0gIFxyXG4gXHJcbi8qIHdpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xyXG4gIGZldGNoUmVzdGF1cmFudEZyb21VUkwoKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XHJcbiAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yIVxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICB6b29tOiAxNixcclxuICAgICAgICBjZW50ZXI6IHJlc3RhdXJhbnQubGF0bG5nLFxyXG4gICAgICAgIHNjcm9sbHdoZWVsOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgZmlsbEJyZWFkY3J1bWIoKTtcclxuICAgICAgREJIZWxwZXIubWFwTWFya2VyRm9yUmVzdGF1cmFudChzZWxmLnJlc3RhdXJhbnQsIHNlbGYubWFwKTtcclxuICAgIH1cclxuICB9KTtcclxufSAqL1xyXG5cclxuLyoqXHJcbiAqIEdldCBjdXJyZW50IHJlc3RhdXJhbnQgZnJvbSBwYWdlIFVSTC5cclxuICovXHJcbmZldGNoUmVzdGF1cmFudEZyb21VUkwgPSAoY2FsbGJhY2spID0+IHtcclxuICBpZiAoc2VsZi5yZXN0YXVyYW50KSB7IC8vIHJlc3RhdXJhbnQgYWxyZWFkeSBmZXRjaGVkIVxyXG4gICAgY2FsbGJhY2sobnVsbCwgc2VsZi5yZXN0YXVyYW50KVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjb25zdCBpZCA9IGdldFBhcmFtZXRlckJ5TmFtZSgnaWQnKTtcclxuICBpZiAoIWlkKSB7IC8vIG5vIGlkIGZvdW5kIGluIFVSTFxyXG4gICAgZXJyb3IgPSAnTm8gcmVzdGF1cmFudCBpZCBpbiBVUkwnXHJcbiAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIChlcnJvciwgcmVzdGF1cmFudCkgPT4ge1xyXG4gICAgICBzZWxmLnJlc3RhdXJhbnQgPSByZXN0YXVyYW50O1xyXG4gICAgICBpZiAoIXJlc3RhdXJhbnQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZmlsbFJlc3RhdXJhbnRIVE1MKCk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmZldGNoUmV2aWV3c0Zyb21VUkwgPSAoY2FsbGJhY2spID0+IHtcclxuICBpZiAoc2VsZi5yZXZpZXcpIHsgLy8gcmVzdGF1cmFudCBhbHJlYWR5IGZldGNoZWQhXHJcbiAgICBjYWxsYmFjayhudWxsLCBzZWxmLnJldmlldylcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY29uc3QgaWQgPSBnZXRQYXJhbWV0ZXJCeU5hbWUoJ2lkJyk7XHJcbiAgaWYgKCFpZCkgeyAvLyBubyBpZCBmb3VuZCBpbiBVUkxcclxuICAgIGVycm9yID0gJ05vIHJlc3RhdXJhbnQgaWQgaW4gVVJMJ1xyXG4gICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBEQkhlbHBlci5mZXRjaFJldmlld0J5SWQoaWQsIChlcnJvciwgcmV2aWV3KSA9PiB7XHJcbiAgICAgIHNlbGYucmVzdGF1cmFudCA9IHJldmlldztcclxuICAgICAgaWYgKCFyZXZpZXcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZmlsbFJldmlld3NIVE1MKCk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJldmlldyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBIVE1MIGFuZCBhZGQgaXQgdG8gdGhlIHdlYnBhZ2VcclxuICovXHJcbmZpbGxSZXN0YXVyYW50SFRNTCA9IChyZXN0YXVyYW50ID0gc2VsZi5yZXN0YXVyYW50KSA9PiB7XHJcbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LW5hbWUnKTtcclxuICBuYW1lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcclxuXHJcbiAgY29uc3QgZmF2b3JpdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXNfZmF2b3JpdGUnKTtcclxuICAvLyBmYXZvcml0ZS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnY2hlY2tib3gnKTtcclxuIFxyXG4gIGlmKHJlc3RhdXJhbnQuaXNfZmF2b3JpdGUgPT0gJ3RydWUnICl7XHJcbiAgICBjb25zb2xlLmxvZyhyZXN0YXVyYW50LmlzX2Zhdm9yaXRlKVxyXG4gICAgZmF2b3JpdGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICBmYXZvcml0ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICd0cnVlJyk7XHJcbiAgICBmYXZvcml0ZS5pbm5lckhUTUwgPSBgUmVtb3ZlICR7cmVzdGF1cmFudC5uYW1lfSBhcyBhIGZhdm9yaXRlYDtcclxuICAgIGZhdm9yaXRlLnRpdGxlID0gYFJlbW92ZSAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWA7XHJcbiAgfSBlbHNle1xyXG4gICAgY29uc29sZS5sb2cocmVzdGF1cmFudC5pc19mYXZvcml0ZSlcclxuICAgIGZhdm9yaXRlLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgIGZhdm9yaXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XHJcbiAgICBmYXZvcml0ZS5pbm5lckhUTUwgPSBgQWRkICR7cmVzdGF1cmFudC5uYW1lfSBhcyBhIGZhdm9yaXRlYDtcclxuICAgIGZhdm9yaXRlLnRpdGxlID0gYEFkZCAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWA7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCdDaGVja2VkIDogJywgZmF2b3JpdGUuY2hlY2tlZCk7XHJcblxyXG5cclxuICBmYXZvcml0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdDaGVja2VkIENsaWNrIDogJywgZmF2b3JpdGUuY2hlY2tlZCk7XHJcbiAgICBpZiggZmF2b3JpdGUuY2hlY2tlZCl7XHJcbiAgICAgIGZhdm9yaXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcclxuICAgICAgZmF2b3JpdGUuaW5uZXJIVE1MID0gYFJlbW92ZSAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWA7XHJcbiAgICAgIGZhdm9yaXRlLnRpdGxlID0gYFJlbW92ZSAke3Jlc3RhdXJhbnQubmFtZX0gYXMgYSBmYXZvcml0ZWA7IFxyXG4gICAgIHJldHVybiBEQkhlbHBlci5zYXZlRmF2b3JpdGUocmVzdGF1cmFudC5pZCwgJ3RydWUnKTsgIFxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGZhdm9yaXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XHJcbiAgICAgIGZhdm9yaXRlLmlubmVySFRNTCA9IGBBZGQgJHtyZXN0YXVyYW50Lm5hbWV9IGFzIGEgZmF2b3JpdGVgO1xyXG4gICAgICBmYXZvcml0ZS50aXRsZSA9IGBBZGQgJHtyZXN0YXVyYW50Lm5hbWV9IGFzIGEgZmF2b3JpdGVgOyAgICAgXHJcbiAgICAgcmV0dXJuIERCSGVscGVyLnNhdmVGYXZvcml0ZShyZXN0YXVyYW50LmlkLCAnZmFsc2UnKTtcclxuICAgIH1cclxuXHJcblxyXG59KTtcclxuXHJcblxyXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1hZGRyZXNzJyk7XHJcbiAgYWRkcmVzcy5pbm5lckhUTUwgPSByZXN0YXVyYW50LmFkZHJlc3M7XHJcblxyXG4gIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtaW1nJyk7XHJcbiAgaW1hZ2UuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtaW1nJ1xyXG4gIGltYWdlLnNyYyA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICBpbWFnZS5zcmNzZXQgPSBEQkhlbHBlci5pbWFnZVNyY3NldEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgaW1hZ2Uuc2l6ZXMgPSBcIihtYXgtd2lkdGg6IDM1MHB4KSAzMDBweCwgKG1heC13aWR0aDogNjUwcHgpIDYwMHB4LCAobWluLXdpZHRoOiA2NTFweCkgODAwcHhcIjtcclxuICBpbWFnZS5hbHQgPSBcIiBcIjtcclxuICBjb25zdCBjdWlzaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtY3Vpc2luZScpO1xyXG4gIGN1aXNpbmUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5jdWlzaW5lX3R5cGU7XHJcblxyXG4gIC8vIGZpbGwgb3BlcmF0aW5nIGhvdXJzXHJcbiAgaWYgKHJlc3RhdXJhbnQub3BlcmF0aW5nX2hvdXJzKSB7XHJcbiAgICBmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCgpO1xyXG4gIH1cclxuICAvLyBmaWxsIHJldmlld3NcclxuICBEQkhlbHBlci5mZXRjaFJldmlld3MocmVzdGF1cmFudC5pZCwgZmlsbFJldmlld3NIVE1MKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IG9wZXJhdGluZyBob3VycyBIVE1MIHRhYmxlIGFuZCBhZGQgaXQgdG8gdGhlIHdlYnBhZ2UuXHJcbiAqL1xyXG5maWxsUmVzdGF1cmFudEhvdXJzSFRNTCA9IChvcGVyYXRpbmdIb3VycyA9IHNlbGYucmVzdGF1cmFudC5vcGVyYXRpbmdfaG91cnMpID0+IHtcclxuICBjb25zdCBob3VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWhvdXJzJyk7XHJcbiAgZm9yIChsZXQga2V5IGluIG9wZXJhdGluZ0hvdXJzKSB7XHJcbiAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cclxuICAgIGNvbnN0IGRheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICBkYXkuaW5uZXJIVE1MID0ga2V5O1xyXG4gICAgcm93LmFwcGVuZENoaWxkKGRheSk7XHJcblxyXG4gICAgY29uc3QgdGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICB0aW1lLmlubmVySFRNTCA9IG9wZXJhdGluZ0hvdXJzW2tleV07XHJcbiAgICByb3cuYXBwZW5kQ2hpbGQodGltZSk7XHJcbiAgICBob3Vycy5hcHBlbmRDaGlsZChyb3cpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbGwgcmV2aWV3cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cclxuICovXHJcbmZpbGxSZXZpZXdzSFRNTCA9IChlcnJvciwgcmV2aWV3cykgPT4ge1xyXG4gIHNlbGYucmVzdGF1cmFudC5yZXZpZXdzID0gcmV2aWV3cztcclxuXHJcbiAgaWYgKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmxvZygnTm8gcmV2aWV3cycsIGVycm9yKTtcclxuICB9XHJcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlld3MtY29udGFpbmVyJyk7XHJcbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gIHRpdGxlLmlubmVySFRNTCA9ICdSZXZpZXdzJztcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGUpO1xyXG5cclxuICBpZiAoIXJldmlld3MpIHtcclxuICAgIGNvbnN0IG5vUmV2aWV3cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIG5vUmV2aWV3cy5pbm5lckhUTUwgPSAnTm8gcmV2aWV3cyB5ZXQhJztcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChub1Jldmlld3MpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzLWxpc3QnKTtcclxuICByZXZpZXdzLmZvckVhY2gocmV2aWV3ID0+IHtcclxuICAgIC8vIHJldmlldyA9IERCSGVscGVyLmZldGNoUmV2aWV3QnlJZChpZCwgKGVycm9yLCByZXZpZXdzKSk7XHJcbiAgICB1bC5hcHBlbmRDaGlsZChjcmVhdGVSZXZpZXdIVE1MKHJldmlldykpO1xyXG4gIH0pO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1bCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmV2aWV3IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZS5cclxuICovXHJcbmNyZWF0ZVJldmlld0hUTUwgPSAocmV2aWV3KSA9PiB7XHJcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIFxyXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xyXG4gIG5hbWUuaW5uZXJIVE1MID0gcmV2aWV3Lm5hbWU7XHJcbiAgbmFtZS5jbGFzc05hbWUgPSAncmV2aWV3LW5hbWUnO1xyXG4gIGxpLmFwcGVuZENoaWxkKG5hbWUpO1xyXG5cclxuICBjb25zdCByYXRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgcmF0aW5nLmNsYXNzTGlzdC5hZGQoJ3JhdGluZycpO1xyXG4gIHJhdGluZy5pbm5lckhUTUwgPSBgUmF0aW5nOiAke3Jldmlldy5yYXRpbmd9YDtcclxuICByYXRpbmcuZGF0YXNldC5yYXRpbmcgPSByZXZpZXcucmF0aW5nO1xyXG4gIGxpLmFwcGVuZENoaWxkKHJhdGluZyk7XHJcblxyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGRpdi5hcHBlbmQobmFtZSk7XHJcbiAgZGl2LmFwcGVuZChyYXRpbmcpO1xyXG4gIGRpdi5jbGFzc05hbWUgPSAncmV2aWV3LWluZm8nO1xyXG4gIGxpLmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gIGNvbnN0IGNyZWF0ZWRBdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICBjcmVhdGVkQXQuY2xhc3NMaXN0LmFkZCgnY3JlYXRlZEF0Jyk7XHJcbiAgY29uc3QgY3JlYXRlZERhdGUgPSBuZXcgRGF0ZShyZXZpZXcuY3JlYXRlZEF0KS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICBjcmVhdGVkQXQuaW5uZXJIVE1MID0gYEFkZGVkOi0gPHN0cm9uZz4ke2NyZWF0ZWREYXRlfTwvc3Ryb25nPmA7XHJcbiAgbGkuYXBwZW5kQ2hpbGQoY3JlYXRlZEF0KTtcclxuXHJcbiAgY29uc3QgdXBkYXRlZEF0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gIGNvbnN0IHVwZGF0ZWREYXRlID0gbmV3IERhdGUocmV2aWV3LnVwZGF0ZWRBdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgdXBkYXRlZEF0LmlubmVySFRNTCA9IGBVcGRhdGVkOi0gPHN0cm9uZz4ke3VwZGF0ZWREYXRlfTwvc3Ryb25nPmA7XHJcbiAgdXBkYXRlZEF0LmNsYXNzTGlzdC5hZGQoJ3VwZGF0ZWRBdCcpO1xyXG4gIGxpLmFwcGVuZENoaWxkKHVwZGF0ZWRBdCk7XHJcblxyXG4gIGNvbnN0IGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkYXRlLmFwcGVuZChjcmVhdGVkQXQpO1xyXG4gIGRhdGUuYXBwZW5kKHVwZGF0ZWRBdCk7XHJcbiAgZGF0ZS5jbGFzc05hbWUgPSAncmV2aWV3LWRhdGUnO1xyXG4gIGxpLmFwcGVuZENoaWxkKGRhdGUpO1xyXG5cclxuICBjb25zdCBjb21tZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICBjb21tZW50cy5jbGFzc0xpc3QuYWRkKCdjb21tZW50cycpO1xyXG4gIGNvbW1lbnRzLmlubmVySFRNTCA9IHJldmlldy5jb21tZW50cztcclxuICBsaS5hcHBlbmRDaGlsZChjb21tZW50cyk7XHJcbiAgcmV0dXJuIGxpO1xyXG5cclxuXHJcbn1cclxuXHJcbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJyk7XHJcbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSAgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuY29uc3QgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MTMzNy9yZXZpZXdzJztcclxuY29uc3QgbWV0aG9kID0gJ3Bvc3QnO1xyXG5sZXQgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcbiBsZXQgbmV3UmV2aWV3ID0ge1xyXG4gICBcImlkXCI6IGZvcm1kYXRhLmdldCgnaWQnKSxcclxuICAgXCJyZXN0YXVyYW50X2lkXCI6IHNlbGYucmVzdGF1cmFudC5pZCxcclxuICAgXCJuYW1lXCI6IGZvcm1kYXRhLmdldCgncmV2aWV3TmFtZScpLFxyXG4gICBcInJhdGluZ1wiOiBmb3JtZGF0YS5nZXQoJ3Jldmlld1JhdGUnKSxcclxuICAgXCJjb21tZW50c1wiOiBmb3JtZGF0YS5nZXQoJ2NvbW1lbnRzJyksXHJcbiAgIFwiY3JlYXRlZEF0XCI6IG5ldyBEYXRlKClcclxuIH1cclxuIGZldGNoKHVybCwge1xyXG4gICBtZXRob2Q6IG1ldGhvZCxcclxuICAgaGVhZGVyczogeyBcIkNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIiB9LCBcclxuICAgYm9keTogSlNPTi5zdHJpbmdpZnkobmV3UmV2aWV3KVxyXG4gfSkudGhlbigocmVzKT0+IHtcclxuICAgY29uc3QgZGF0YSA9IHJlcy5qc29uKCk7XHJcbiAgIGZpbGxSZXZpZXdzSFRNTCgpO1xyXG4gICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIERhdGEnLCBkYXRhKTtcclxuICAgcmV0dXJuIGRhdGE7XHJcbiB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICBkYlByb21pc2UudGhlbihkYiA9PiB7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXctc3RvcmUnLCAncmVhZHdyaXRlJyk7XHJcbiAgICBjb25zdCByZXZpZXdTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXctc3RvcmUnKTtcclxuICAgICAgcmV2aWV3U3RvcmUucHV0KG5ld1Jldmlldyk7XHJcbiAgICAgIGZpbGxSZXZpZXdzSFRNTCgpO1xyXG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgY29uc29sZS5sb2coJ1Bvc3RpbmcgT2ZmbGluZScsIGVycik7XHJcbiAgICAgIHJldHVybiB0eC5jb21wbGV0ZTtcclxuICAgfSlcclxuIH0pXHJcbn0pO1xyXG4vKipcclxuICogQWRkIHJlc3RhdXJhbnQgbmFtZSB0byB0aGUgYnJlYWRjcnVtYiBuYXZpZ2F0aW9uIG1lbnVcclxuICovXHJcbmZpbGxCcmVhZGNydW1iID0gKHJlc3RhdXJhbnQ9c2VsZi5yZXN0YXVyYW50KSA9PiB7XHJcbiAgY29uc3QgYnJlYWRjcnVtYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicmVhZGNydW1iJyk7XHJcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIGxpLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcclxuICBicmVhZGNydW1iLmFwcGVuZENoaWxkKGxpKTtcclxufVxyXG4vKipcclxuICogR2V0IGEgcGFyYW1ldGVyIGJ5IG5hbWUgZnJvbSBwYWdlIFVSTC5cclxuICovXHJcbmdldFBhcmFtZXRlckJ5TmFtZSA9IChuYW1lLCB1cmwpID0+IHtcclxuICBpZiAoIXVybClcclxuICAgIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcclxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFs/Jl0ke25hbWV9KD0oW14mI10qKXwmfCN8JClgKSxcclxuICAgIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgaWYgKCFyZXN1bHRzKVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgaWYgKCFyZXN1bHRzWzJdKVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbn1cclxuIl19
